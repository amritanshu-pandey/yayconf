import pytest
import yaml

from random import randint


@pytest.fixture
def repo_slug_factory(faker):
    """Method to generate BitBucket repository slugs"""
    def repo_slug_func():
        return faker.slug().replace('-', '_')
    return repo_slug_func


@pytest.fixture
def project_slug_factory(faker):
    """Method to generate Bitbucket project slugs"""
    def project_slug_func():
        return faker.slug().replace('-', '_').upper()
    return project_slug_func


@pytest.fixture
def valid_config_file(tmpdir, faker):
    """produce a valid config file using a fake dictionary

    Returns:
        tuple -- Tuple containing following:
                    1. Path to a valid config file
                    2. Random dictionary used to generate the config file
    """

    cfg = tmpdir.join('valid-config.yaml')
    fakedict = faker.pydict(10, True, str, int)
    fakeyaml = yaml.dump(fakedict, default_flow_style=False)
    cfg.write(fakeyaml)

    return (cfg, fakedict)


@pytest.fixture
def empty_config_file(tmpdir):
    """produce an empty config file

    Returns:
        tuple -- Tuple containing following:
                    1. Path to an empty config file
                    2. A blank dictionary
    """
    cfg = tmpdir.join('empty-config.yaml')
    cfg.write('')
    emptydict = {}
    return (cfg, emptydict)


@pytest.fixture
def fake_config_schema_snippets_factory(faker, repo_slug_factory):
    """Method to generate config schema sections in dictionary format

    Following fields are added to the schema for facilitating the unit tests:
        1. Priority - Could be one of following: default/config/environment.
        2. default - If priority is default, this value should be picked in the
                     final configuration
        3. config - If priority is config, this value should be picked in the
                     final configuration
        4. environment - If priority is environment, this value should be
                         picked in the final configuration
    """
    def f():
        fixture = []

        for priority in ('default', 'config', 'environment'):
            fixture.append(
                {
                    'name': faker.pystr(),
                    'description': faker.sentence(),
                    'required': True,
                    'default': repo_slug_factory(),
                    'priority': priority,
                    'environment': repo_slug_factory(),
                    'config': repo_slug_factory()
                }
            )

        return fixture
    return f


@pytest.fixture
def fake_config_schema_and_dict(faker, fake_config_schema_snippets_factory,
                                monkeypatch, tmpdir):
    """Create a fake config schema file and a configuration file crafted
       to pick correct values from schema, configuration file and environment
       based on the priority field included in schema.

       1. Schema file contains random number of items generated by
          ``fake_config_schema_snippets_factory``
       2. Config file includes those elements from schema file where priority
          is either 'config' or 'environment'
       3. For those items in schema file having priority as environment,
          an environment variable is set with the same name and value as
          specified in schema file.

    Returns:
        tuple -- Tuple containing following:
                    1. Schema file generated for test
                    2. Dictionary used to generate the schema file
                    3. Config file generated for test
    """

    number_of_snippets = randint(5, 10)
    schema_dict = []
    for i in range(1, number_of_snippets):
        schema_dict.extend(fake_config_schema_snippets_factory())

    schema_file = tmpdir.join('schema.yaml')
    schema_file.write(yaml.dump(
        schema_dict, default_flow_style=False
    ))

    x_cfg_from_file = {}

    for i in schema_dict:
        if i['priority'] == 'environment':
            monkeypatch.setenv(i['name'], i['environment'])
            x_cfg_from_file[i['name']] = i['config']
        elif i['priority'] == 'config':
            x_cfg_from_file[i['name']] = i['config']

    config_file = tmpdir.join('config.yaml')
    config_file.write(yaml.dump(
        x_cfg_from_file, default_flow_style=False
    ))

    return (schema_file, schema_dict, config_file)
